<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[web性能优化]]></title>
      <url>%2F2017%2F04%2F11%2F170411%2F</url>
      <content type="text"><![CDATA[随着网页内容和功能的越来越复杂，页面体验变得越来越不好。而体验不好就会造成流量大量流失，这是我们所不能接受的。所以，性能优化也变得越来越重要。 讲真，现在网上有很多文章介绍怎么样优化性能。很多文章针对各个方面的优化写得都不错，但是有点乱。对于脑容量特别稀少的我来说记不住，最好还是捋一遍 1.输入网址按下回车（大致）发生了什么？ 1.1 检测本地Hosts文件查找主机名对应IP，如果检测不到就进行DNS解析 1.2 根据查询的IP连接web服务器 1.3 向服务器发送http请求 1.4 服务器响应 1.5 渲染页面 1.6 浏览器发送嵌入HTML的对象的请求（图片、css、js） 1.7 浏览器发送进一步的异步（AJAX）请求 1. 网页的生成过程 网页的生成过程，大致可以分成五步。 HTML代码转化成DOM CSS代码转化成CSSOM（CSS Object Model） 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息） 生成布局（layout），即将所有渲染树的所有节点进行平面合成 将布局绘制（paint）在屏幕上 这五步里面，第一步到第三步都非常快，耗时的是第四步和第五步。“生成布局”（flow）和”绘制”（paint）这两步，合称为”渲染”（render）。 2. 重排和重绘 网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。 以下三种情况，会导致网页重新渲染。 修改DOM 修改样式表 用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等） 重新渲染，就需要重新生成布局和重新绘制。前者叫做”重排”（reflow），后者叫做”重绘”（repaint）。需要注意的是，”重绘”不一定需要”重排”，比如改变某个网页元素的颜色，就只会触发”重绘”，不会触发”重排”，因为布局没有改变。但是，”重排”必然导致”重绘”，比如改变一个网页元素的位置，就会同时触发”重排”和”重绘”，因为布局改变了。 3. 对于性能的影响 重排和重绘会不断触发，这是不可避免的。但是，它们非常耗费资源，是导致网页性能低下的根本原因。提高网页性能，就是要降低”重排”和”重绘”的频率和成本，尽量少触发重新渲染。 熟悉各个步骤可以让我们针对每个步骤进行优化 我们可以从三大方面进行优化 页面优化 减少http请求 减少交互通信量 合理并行加载资源 减少消耗 服务器端优化 CDN 缓存 Gzip 减少DNS 响应速度 主观优化 目录优化 内容优化（灵魂） 体验优化 SEO]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[纯CSS实现表单元素的美化]]></title>
      <url>%2F2017%2F04%2F10%2F170410%2F</url>
      <content type="text"><![CDATA[今天被问到一个题目:用纯CSS实现表单元素（radio/checkbox）的美化。 我首先想到的就是把radio/checked隐藏，使用label的 for=””属性，最后给label设置两套css样式,没选中时一种，选中时一种。 简单实现代码如下： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;纯CSS实现表单样式&lt;/title&gt; &lt;style&gt; .wrap{ display: inline-block; height: 30px; width: 30px; border-radius: 50%; position: relative; background-color: #ddd; margin: 5px 10px; } input[type=radio]{ visibility: hidden; } .label{ display: inline-block; width: 20px; height: 20px; border-radius: 50%; position: absolute; left: 5px; top: 5px; background-color: #999; transition: all 0.5s ease; } /* 此处一下两个样式不可颠倒 */ .radio[type=radio]:hover + label{ background-color: #666; } .radio[type=radio]:checked + label{ background-color: darkgreen; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;input type=&quot;radio&quot; id=&quot;radio1&quot; name=&quot;gender&quot; class=&quot;radio&quot;&gt; &lt;label for=&quot;radio1&quot; class=&quot;label&quot;&gt;&lt;/label&gt; &lt;/div&gt;male &lt;div class=&quot;wrap&quot;&gt; &lt;input type=&quot;radio&quot; id=&quot;radio2&quot; name=&quot;gender&quot; class=&quot;radio&quot;&gt; &lt;label for=&quot;radio2&quot; class=&quot;label&quot;&gt;&lt;/label&gt; &lt;/div&gt;female &lt;/body&gt; &lt;/html&gt; 效果图如下所示： 其实复选框跟这个是一样的，另外复选框还可以做出滑动的效果，只是设置样式不一样。 把代码稍微改动一下可以实现以下效果： 代码如下： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;纯CSS实现表单样式&lt;/title&gt; &lt;style&gt; .wrap{ display: inline-block; height: 10px; width: 50px; border-radius: 5px; position: relative; background-color: #ddd; margin: 10px 20px; } input[type=checkbox]{ visibility: hidden; } .label{ display: inline-block; width: 20px; height: 20px; border-radius: 50%; position: absolute; left: 0px; top: -5px; background-color: #999; transition: all 0.5s ease; cursor: pointer; } .radio[type=checkbox]:checked + label{ left: 30px; background-color: green; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;radio&quot; name=&quot;gender&quot; class=&quot;radio&quot;&gt; &lt;label for=&quot;radio&quot; class=&quot;label&quot;&gt;&lt;/label&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SassScript]]></title>
      <url>%2F2017%2F01%2F07%2Fsass2%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[sass]]></title>
      <url>%2F2017%2F01%2F07%2Fsass%2F</url>
      <content type="text"><![CDATA[Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目。 作为一个前端，相信当我们在团队协作过程中查看别人的CSS样式时肯定一脸捉急，毕竟每个人的代码风格不太一样，就算公司有自己的规范，看到密密麻麻的一堆css样式，心头肯定也是一万头草泥马奔腾的声音，更别提新入职后开始维护“前辈们”留下的代码了。Sass的出现一定程度上拯救了我们的头发 ：P 下面就让我们来自救一下吧。 Sass 的功能 完全兼容 CSS3 在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能 通过函数进行颜色值与属性值的运算 提供控制指令 (control directives)等高级功能 自定义输出格式 两种语法格式 首先是 SCSS (Sassy CSS) —— 也是本文示例所使用的格式 —— 这种格式仅在 CSS3 语法的基础上进行拓展，所有 CSS3 语法在 SCSS 中都是通用的，同时加入 Sass 的特色功能。这种格式以 .scss 作为拓展名。 另一种也是最早的 Sass 语法格式，被称为缩进格式 (Indented Sass) 通常简称 “Sass”，是一种简化格式。这种格式以 .sass 作为拓展名。 两者关系：任何一种格式可以直接导入 (@import) 到另一种格式中使用，或者通过 sass-convert命令行工具转换成另一种格式：# Convert Sass to SCSS $ sass-convert style.sass style.scss # Convert SCSS to Sass $ sass-convert style.scss style.sass 安装与配置Sass 关于Sass的安装，大家可以去Sass教程网站查看说明，毕竟每个人的运行环境不一致，这里就不作赘述了。 Sass用法 把scss文件转换为css文件 : sass test.scss test.css 监视单个 Sass 文件，每次修改并保存时自动编译： sass --watch input.scss:output.css 监视整个文件夹： sass --watch app/sass:public/stylesheets Sass功能扩展5.1 嵌套规则 Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，例如： #main p { color: #00ff00; width: 97%; .redbox { background-color: #ff0000; color: #000000; } } 编译后为 #main p { color: #00ff00; width: 97%; } #main p .redbox { background-color: #ff0000; color: #000000; } 嵌套功能避免了重复输入父选择器，而且令复杂的 CSS 结构更易于管理 5.2 父选择器 &amp; 在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，或者当 body 元素有某个 classname 时，可以用 &amp; 代表嵌套规则外层的父选择器。例如a { font-weight: bold; text-decoration: none; &amp;:hover { text-decoration: underline; } body.firefox &amp; { font-weight: normal; } } 编译后为a { font-weight: bold; text-decoration: none; } a:hover { text-decoration: underline; } body.firefox a { font-weight: normal; } 编译后的 CSS 文件中 &amp; 将被替换成嵌套外层的父选择器，如果含有多层嵌套，最外层的父选择器会一层一层向下传递 &amp; 必须作为选择器的第一个字符，其后可以跟随后缀生成复合的选择器，例如:#main { color: black; &amp;-sidebar { border: 1px solid; } } 编译后#main { color: black; } #main-sidebar { border: 1px solid; } 当父选择器含有不合适的后缀时，Sass 将会报错。 5.3 属性嵌套 有些 CSS 属性遵循相同的命名空间 (namespace)，比如 font-family, font-size, font-weight 都以 font 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如： .funky { font: 20px/24px { #注意font后面的冒号 family: fantasy; size: 30em; weight: bold; } } 编译后 .funky { font:20px/40px; font-family: fantasy; font-size: 30em; font-weight: bold; } 5.4 占位符选择器 %foo Sass 额外提供了一种特殊类型的选择器：占位符选择器 (placeholder selector)。与常用的 id 与 class 选择器写法相似，只是 #或 .替换成了 %。必须通过 @extend 指令调用. 5.5 注释 / / 与 // Sass 支持标准的 CSS 多行注释 / /，以及单行注释 //，前者会 被完整输出到编译后的 CSS 文件中，而后者则不会]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[http]]></title>
      <url>%2F2016%2F07%2F15%2Fhttp%2F</url>
      <content type="text"><![CDATA[Web使用HTTP(HyperText Transfer Protocol,超文本传输协议)作为规范，完成从客户端到服务器的一系列流程。可以说，Web是建立在HTTP通信协议上的。 HTTP 的历史 HTTP 诞生于1990年，那时候并没有被作为正式的标准建立，这时的HTTP 其实含有HTTP/1.0之前版本的意思，因此被称为HTTP/0.9 HTTP被作为正式标准公布实在1996年5月，被命名为HTTP/1.0，并记载于RFC1945 目前主流的HTTP协议版本是1997年1月公布的HTTP/1.1 2.TCP/IP通常使用的网络，是在TCP/IP协议族的基础上运作的。HTTP属于它内部的一个子集。 TCP/IP 协议族计算机与网络设备要相互通信，双方就必须基于相同的方法。不同的硬件，操作系统之间的通信，所有这一切都需要一种规则，我们就把这种规则称为协议。协议中存在各式各样的内容。像这样把互联网相关联的协议集合起来总称为 TCP/IP TCP/IP的分层管理TCP/IP协议族里最重要的一点就是分层。TCP/IP协议族按层次分别分为一下四层：应用层、传输层、网络层和数据链层 分层的好处：1）在某个地方需要改变设计时，只需要把变动的层替换掉即可而不必把所有部分整体换掉。各层之间接口部分规划好之后，每个层次内部的设计就能够自由的改动了。2）层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务为不必考虑其他。 应用层应用层决定了向用户提供应用服务的时通信的活动。TCP/IP协议族内预存了各类通用的应用服务，比如，FTP 和 DNS。HTTP 协议也处于该层。 传输层传输层对上层的应用层提供网络连接中的两台计算机之间的数据传输。这层有两个性质完全不同的协议: TCP（传输控制协议）和UDP（用户数据报协议） 网络层网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单元。该层决定了通过怎样的路径到达对方的计算机，并把数据传送给对方。 链路层（又名网络接口层）用来处理连接网络的硬件部分。包括，控制操作系统、硬件设备驱动、网卡，及光纤等物理可见的部分。 负责传输的IP协议 IP协议位于网络层，作用就是把数据包传送给对方，其中两个重要的条件是IP地址和MAC地址。 IP地址指明了节点被分配到的地址，MAC地址指的是网卡所属的固定地址。IP地址可以和MAC地址进行配对，IP地址可以变换，但是MAC地址基本上不会更改。 使用ARP协议凭借MAC地址进行通信。ARP是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。 没有人能全面掌握互联网中的传输状况 确保可靠性的TCP协议 TCP协议位于传输层，提供可靠的字节流服务。字节流服务指的是，为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。 为了准确无误的就爱你个数据送达目标处，TCP协议采用了三次握手策略。首先发送端发送带有SYN标志的数据包，然后接收端收到后回传一个带有SYN/ACk标志的数据包以示传达确认信息。最后，发送端再回传一个带有ACK标志的数据包，握手结束。 负责域名解析的DNS服务 DNS服务是和HTTP协议一样位于应用层的协议。 它提供域名到IP地址之间的解析服务。 #####各种协议与HTTP协议的关系图 地址栏的一次回车以后到底发生了生么？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用github和hexo搭建个人博客(终章)]]></title>
      <url>%2F2016%2F07%2F09%2Ffourth%2F</url>
      <content type="text"><![CDATA[个性化设置（重点终于来了 ：P ) hexo 官方提供的主题那是真的很不好看，还好支持自定义主题。根目录下有一个themes文件夹里面放的就是主题文件。 hexo官网提供了很多的主题，可以在里面选择自己喜欢的，打开后查看效果按照说明进行安装和配置（这里就不赘述了，相信大家都有自己查看文档的能力）。 我现在使用的主题是NexT 主页里有更详细的说明，刚开始按照步骤来就行了。 绑定域名 不知道你又没有眼热别人的个性化域名呢，反正我眼热了，怎么办呢，剁手买买买！之前周围的朋友有在腾讯云买过域名和服务器，也就被安利了一把。先买了个一年域名玩玩，首年只要四十多，价格还能接受。如果你是学生的话可以更优惠哦，可惜我毕了业。这里讲在腾讯买域名，并不是做广告，只是因为我现在身在深圳，域名备案方便点，大家可以按自己意愿选择。 新建CNAME文件在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站顶级域名，如xxxx.com，注意前面没http://www 然后使用hexo g &amp;&amp; hexo d上传部署。比如我的是gongchenlin.com 进行DNS解析在域名提供商添加dns解析（免费）关于dns解析知乎上有很多方法，我的朋友只添加了一个CNAME 文件，然后在 github 上的 博客仓库 进入设置里的Custom domain 添加上域名就可以了。但是我的一直不行，后来有添加了两条 A 记录 才成功。大家可以参考github官网的办法。 域名解析是要一段时间的，解析成功后要等一段时间。至此，搭建博客的教程就结束了，当然博客和域名还有很多其他玩法，大家有兴趣可以自行探索。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用github和hexo搭建个人博客(三)]]></title>
      <url>%2F2016%2F07%2F09%2Fthird%2F</url>
      <content type="text"><![CDATA[安装 hexo 写文章并上传1.全局安装 hexo 打开 git bash(在哪里打开都行) 键入命令：npm install -g hexo 2.初始化 hexo 在本地新建一个文件夹hexo（名字可以随便起，将来存放文章或者代码） 比如我的是在E盘下新建了一个Blog文件夹 进入文件夹 右键打开git bash 键入命令 ：hexo init hexo会自动下载一些文件到这个目录，现在我们已经建好了本地博客了。 3.查看本地博客 在博客根文件夹下右键打开 git bash 键入命令： hexo g # 生成文件 hexo s # 启动服务 打开浏览器 键入地址： http://localhost:4000/至此本地博客部署完成！：） 4.上传本第文章到github 这个时候打开我们的博客https://xinhaian.github.io 还是不能访问的，因为我们还没有把本地的代码上传到github上。 配置 _config.yml（全局配置文件）在Blog文件夹根目录下找到并打开_config.yml文件。在文件的最下方修改如下（注意缩进!!!）：deploy: type: git repository: git@github.com:xinhaian/xinhaian.github.io.git branch: master 其中repository是仓库地址，可以在点击github仓库右上角的”clone or down” 按钮后直接复制地址。 安装提交插件在博客根目录下打开git bash 键入命令:npm install hexo-deployer-git --save 提交文章还是在根目录下 键入提交命令：hexo d 提交完成后，我们打开网页 https://xinhaian.github.io 就可以看到效果了。 5.hexo 常用命令 hexo new &quot;文章名&quot; #新建文章 hexo generate #生成静态页面至public目录 hexo server #开启本地预览（默认端口4000，&apos;ctrl + c&apos;关闭） hexo deploy #提交到GitHub仓库 每次我们新建文件和上传的步骤为： hexo n &quot;文章名&quot; #新建文章 hexo g #生成html hexo d #提交 当我们 hexo n “文章名” 新建文章的时候，会在source-&gt;_posts文件夹下生成markdown文件，打开文件编辑完成后保存 运行 hexo g 的时候 hexo会在public文件下生成同名的html文件，最终我们运行 hexo d 提交的就是public文件夹里的文件。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用github和hexo搭建个人博客(二)]]></title>
      <url>%2F2016%2F07%2F08%2Fsecond%2F</url>
      <content type="text"><![CDATA[事前准备和搭建github1.安装node.js、git 安装node.js打开node.js官网，下载合适的版本，并运行。安装完node后会顺带安装好npm(node包管理器)。 打开git官网，下载合适的版本，并运行。 2.注册github 首先我们要有一个github帐号，身为程序员的我们应该都有github帐号，毕竟github上有那么多的资源供我们学习 打开github官网，输入用户名、邮箱（重要）、密码，点击注册，然后到邮箱确认注册信息就可以使用了。 3.配置ssh key 打开git bash 键入命令：cd ~/. ssh (检查本机是否已存在的ssh密钥）如果之前没有使用过 则会提示 No such file or directory 键入命令：ssh-keygen -t rsa -C “邮件地址” （连击三次回车生成 ssh key,邮箱地址写注册时的地址） 打开github的设置，进入SSH and GPG keys 选项，新建SSH keys ,title随便写（最好写的以后可以记得是写博客用的）打开电脑上 C:\Users\Administrator\ .ssh文件夹 里面有刚刚生成的密钥找到 id_rsa.pub 文件 ，把内容复制到 key里 点击新增SSH key 检测是否配置成功 键入命令：ssh -T git@github.com返回如下 说明配置成功Hi XinHaiAn! You’ve successfully authenticated, but GitHub does not provide shell access. 配置用户信息（用户名和邮箱） 键入命令：git config –global user.name “你的github用户名”git config –global user.email “你的github注册邮箱”比如我的git config –global user.name “XinHaiAn”git config –global user.email “7527**5@qq.com” 4.在github上新建一个仓库 在github上新建一个名为: 用户名.github.io 的仓库（每个账户只能建立一个）。比如我的用户名是XinHaiAn 我的仓库名为就是 XinHaiAn.github.io（我的博客地址就是https://xinhaian.github.io ）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用github和hexo搭建个人博客(一)]]></title>
      <url>%2F2016%2F07%2F08%2Ffirst%2F</url>
      <content type="text"><![CDATA[我为什么要搭建自己的博客？ 在小学的时候，老师会要求我们每周写周记并且要上交。至今仍能想起自己当时偷懒的模样…上中学时，习惯了在书本上记笔记，上面密密麻麻的字还有一些插画…高中了，有了专门的笔记本。年纪大了以后，心里有了一些事情了，自己也开始记起了笔记。虽然现在我们习惯了在社交软件上记录自己的心情，我心底还是倾向于在纸上写下自己的想法和心情。但毕竟现在是互联网时代了，在网上写东西多了不少便利，尤其是对于我们学习软件的，在技术越来越复杂的年代，单靠人的脑袋是记不住那么多的东西，但有时我们有需要查以前的知识点，再去翻以前的笔记就困难多了。现在网上有很多免费的博客供我们使用，当然要好好利用了。但是我们心底都会追求个性化，正好可以利用github和hexo搭建自己的免费博客并设置自己的主题以实现自己的风格。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2038]]></title>
      <url>%2F2016%2F06%2F13%2F2038%2F</url>
      <content type="text"><![CDATA[不知道大家有没有听说过千年虫事件呢，因为计算机在内部时钟里只用了两个数字来代表年份，这样2000年1月1日就会被显示为“1/1/00”，跟1900年1月1日的显示结果是一样的。 咋一听，并没有什么让人感到什么，但是细思极恐啊。关于千年虫我就不多说了，不了解的朋友去看看百科就知道了。这里我们讲讲2038问题。 由于32位系统的限制，大量的计算机软件很可能会在2038年失效。 做软件的我们都知道计算机里面的时间原点是1970年1月1日(unix的诞生年)，我们要想计算时间就要根据原点时间计算。 比如919642718代表的就是在上述时间之后过了919642718秒之后的那个时刻，经过换算它代表的就是时间1999年2月21日19点18分38秒。 但是32位的操作系统或者软件会面临一个严肃的问题，那就是32位系统所能存储的最大时间是2^31秒（第一位是符号位）。折算出来就是 2^31/60/60/24/365≈68年,1970年的68年以后就是2038年。 在2038年的某一天（大家感兴趣可以自己去算算具体时间），所有32位的系统和软件的时间就会发生溢出，出现归零问题（从1970年开始计算）。 当然，早有专家考虑到了这个问题，提出升级到64位操作系统。64位系统最大存储秒数为 2^63 = 9223372036854775808 ≈ 2920 亿年。这么大的数字绝对够用了（如果地球还没有爆炸的话），也许不知多少年后人们会规定别的纪年方法也不一定呢。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[web简介]]></title>
      <url>%2F2016%2F01%2F10%2Fweb%2F</url>
      <content type="text"><![CDATA[web核心 HTML(结构) CSS（样式） JavaScript（行为） 1. HTML（超文本标记语言） HTML 的英文全称是 Hyper Text Markup Language.主要是负责写页面结构。 基本结构 12345678910&lt;!doctype html&gt; &lt;!-- 文档头类型 代表以html5规范解析 --&gt;&lt;html&gt; &lt;!-- 根元素 --&gt; &lt;head&gt; &lt;!-- 头部 --&gt; &lt;meta charset="UTF-8"&gt; &lt;!-- 元信息 --&gt; &lt;title&gt;Document&lt;/title&gt; &lt;!-- 文档标题 --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 身体 --&gt; &lt;!-- 内容 --&gt; &lt;/body&gt;&lt;/html&gt; 标签以闭合方式分类 标签分为单标签和双标签，每个标签都有自己的作用具体参见w3school 单标签 如: &lt;br&gt;换行 &lt;hr&gt;水平线 &lt;img&gt;引入图片 ... 双标签 如: &lt;h1&gt;一级标题&lt;/h1&gt; &lt;p&gt;段落&lt;/p&gt; ... 标签以性质分类 元素可以分为 块元素、行内元素、行内块元素 三者的区别： 块元素可以设置宽和高，内边距、外边距，自己占据一行 行内元素不可以设置宽和高，可以设置内边距和左右外边距，和其行内他元素同处一行 行内块元素可以设置宽和高、内边距、外边距，和其他行内元素或者行内块元素同处一行 块元素 如: &lt;div&gt;&lt;/div&gt; &lt;p&gt;&lt;/p&gt;... 行内元素 如: &lt;span&gt;&lt;/span&gt; &lt;br&gt; &lt;hr&gt; ... 行内块元素 如: &lt;img&gt; &lt;input&gt; ... 标签嵌套规则 标签要正确嵌套否则会产生问题。 块元素可以包含内联元素或某些块元素，但内联元素却不能包含块元素，它只能包含其它的内联元素 几个特殊的块级元素只能包含内联元素，不能再包含块级元素，这几个特殊的标签是：&lt;h1&gt;&lt;/h1&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h4&gt;&lt;/h4&gt; &lt;h5&gt;&lt;/h5&gt; &lt;h6&gt;&lt;/h6&gt; &lt;p&gt;&lt;/p&gt; &lt;dt&gt;&lt;/dt&gt; 另外 &lt;a&gt;&lt;/a&gt;不能嵌套&lt;a&gt;&lt;/a&gt; 2. CSS（层叠样式表） CSS 的英文全称是 Cascading Style Sheets. 主要负责页面的样式。 CSS样式表分类：根据位置可以分为内联样式表、内部样式表、外部样式表。 内联样式表 内联样式表是直接写在元素标签里 比如: 1&lt;p style="height:20px;width:100px"&gt;&lt;/p&gt; 内部样式表 内部样式表是写在&lt;head&gt;&lt;/head&gt;标签里面的&lt;style&gt;&lt;/style&gt;标签里面的。如: 12345678&lt;head&gt; &lt;style type="text/css"&gt; p&#123; width:100px; height:20px; &#125; &lt;/style&gt;&lt;/head&gt; 外部样式表 外部样式表是通过&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径地址&quot; type=&quot;text/css&quot;&gt;引用的，通常放在&lt;head&gt;&lt;/head&gt;之间。如: 123&lt;head&gt; &lt;link rel="stylesheet" href="css文件地址" type="text/css"&gt;&lt;/head&gt; 三种样式表的优缺点和优先级以及！。 优缺点 内联样式表： 优点：优先级特别高 缺点：代码冗余，维护困难 适用场景：确定后基本不再修改的样式 内部样式表： 优点：相对内联样式表代码量少一些，相对外部样式表没有服务器请求压力 缺点：不易改版和维护，代码较乱，不易于后端交互 适用场景： 大型网站首页 外部样式表： 优点：结构与样式分离使得页面代码简洁，易于改版和维护，一套样式可以多次利用。 缺点：服务器请求压力 适用场景： 大型网站的二三级页面 优先级 内联样式表&gt;内部样式表、外部样式表 内部样式表、外部样式表 选择器优先级一样：谁后引入谁生效 选择器优先级不同：选择器优先级高的生效 注意：外部的样式后面加上 !important 可以覆盖内联样式。!important 的优先级最高。不过，IE6及以下不支持!important .]]></content>
    </entry>

    
  
  
</search>
